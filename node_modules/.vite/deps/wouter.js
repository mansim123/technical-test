import {
  require_react
} from "./chunk-OGJ3ARO5.js";
import {
  __toESM
} from "./chunk-NISBT54A.js";

// node_modules/wouter/react-deps.js
var import_react = __toESM(require_react(), 1);

// node_modules/wouter/use-location.js
var eventPopstate = "popstate";
var eventPushState = "pushState";
var eventReplaceState = "replaceState";
var events = [eventPopstate, eventPushState, eventReplaceState];
var use_location_default = ({ base = "" } = {}) => {
  const [{ path, search }, update] = (0, import_react.useState)(() => ({
    path: currentPathname(base),
    search: location.search
  }));
  const prevHash = (0, import_react.useRef)(path + search);
  (0, import_react.useEffect)(() => {
    const checkForUpdates = () => {
      const pathname = currentPathname(base);
      const search2 = location.search;
      const hash = pathname + search2;
      if (prevHash.current !== hash) {
        prevHash.current = hash;
        update({ path: pathname, search: search2 });
      }
    };
    events.forEach((e) => addEventListener(e, checkForUpdates));
    checkForUpdates();
    return () => events.forEach((e) => removeEventListener(e, checkForUpdates));
  }, [base]);
  const navigate = (0, import_react.useCallback)((to, { replace = false } = {}) => history[replace ? eventReplaceState : eventPushState](null, "", to[0] === "~" ? to.slice(1) : base + to), [base]);
  return [path, navigate];
};
if (typeof history !== "undefined") {
  for (const type of [eventPushState, eventReplaceState]) {
    const original = history[type];
    history[type] = function() {
      const result = original.apply(this, arguments);
      const event = new Event(type);
      event.arguments = arguments;
      dispatchEvent(event);
      return result;
    };
  }
}
var currentPathname = (base, path = location.pathname) => !path.toLowerCase().indexOf(base.toLowerCase()) ? path.slice(base.length) || "/" : "~" + path;

// node_modules/wouter/matcher.js
function makeMatcher(makeRegexpFn = pathToRegexp) {
  let cache = {};
  const getRegexp = (pattern) => cache[pattern] || (cache[pattern] = makeRegexpFn(pattern));
  return (pattern, path) => {
    const { regexp, keys } = getRegexp(pattern || "");
    const out = regexp.exec(path);
    if (!out)
      return [false, null];
    const params = keys.reduce((params2, key, i) => {
      params2[key.name] = out[i + 1];
      return params2;
    }, {});
    return [true, params];
  };
}
var escapeRx = (str) => str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
var rxForSegment = (repeat, optional, prefix) => {
  let capture = repeat ? "((?:[^\\/]+?)(?:\\/(?:[^\\/]+?))*)" : "([^\\/]+?)";
  if (optional && prefix)
    capture = "(?:\\/" + capture + ")";
  return capture + (optional ? "?" : "");
};
var pathToRegexp = (pattern) => {
  const groupRx = /:([A-Za-z0-9_]+)([?+*]?)/g;
  let match = null, lastIndex = 0, keys = [], result = "";
  while ((match = groupRx.exec(pattern)) !== null) {
    const [_, segment, mod] = match;
    const repeat = mod === "+" || mod === "*";
    const optional = mod === "?" || mod === "*";
    const prefix = optional && pattern[match.index - 1] === "/" ? 1 : 0;
    const prev = pattern.substring(lastIndex, match.index - prefix);
    keys.push({ name: segment });
    lastIndex = groupRx.lastIndex;
    result += escapeRx(prev) + rxForSegment(repeat, optional, prefix);
  }
  result += escapeRx(pattern.substring(lastIndex));
  return { keys, regexp: new RegExp("^" + result + "(?:\\/)?$", "i") };
};

// node_modules/wouter/index.js
var RouterCtx = (0, import_react.createContext)({});
var buildRouter = ({
  hook = use_location_default,
  base = "",
  matcher = makeMatcher()
} = {}) => ({ hook, base, matcher });
var useRouter = () => {
  const globalRef = (0, import_react.useContext)(RouterCtx);
  return globalRef.v || (globalRef.v = buildRouter());
};
var useLocation = () => {
  const router = useRouter();
  return router.hook(router);
};
var useRoute = (pattern) => {
  const [path] = useLocation();
  return useRouter().matcher(pattern, path);
};
var useNavigate = (options) => {
  const navRef = (0, import_react.useRef)();
  const [, navigate] = useLocation();
  navRef.current = () => navigate(options.to || options.href, options);
  return navRef;
};
var Router = (props) => {
  const ref = (0, import_react.useRef)();
  const value = ref.current || (ref.current = { v: buildRouter(props) });
  return (0, import_react.createElement)(RouterCtx.Provider, {
    value,
    children: props.children
  });
};
var Route = ({ path, match, component, children }) => {
  const useRouteMatch = useRoute(path);
  const [matches, params] = match || useRouteMatch;
  if (!matches)
    return null;
  if (component)
    return (0, import_react.createElement)(component, { params });
  return typeof children === "function" ? children(params) : children;
};
var Link = (props) => {
  const navRef = useNavigate(props);
  const { base } = useRouter();
  let { to, href = to, children, onClick } = props;
  const handleClick = (0, import_react.useCallback)((event) => {
    if (event.ctrlKey || event.metaKey || event.altKey || event.shiftKey || event.button !== 0)
      return;
    event.preventDefault();
    navRef.current();
    onClick && onClick(event);
  }, [onClick]);
  const extraProps = {
    href: href[0] === "~" ? href.slice(1) : base + href,
    onClick: handleClick,
    to: null
  };
  const jsx = (0, import_react.isValidElement)(children) ? children : (0, import_react.createElement)("a", props);
  return (0, import_react.cloneElement)(jsx, extraProps);
};
var flattenChildren = (children) => {
  return Array.isArray(children) ? [].concat(...children.map((c) => c && c.type === import_react.Fragment ? flattenChildren(c.props.children) : flattenChildren(c))) : [children];
};
var Switch = ({ children, location: location2 }) => {
  const { matcher } = useRouter();
  const [originalLocation] = useLocation();
  for (const element of flattenChildren(children)) {
    let match = 0;
    if ((0, import_react.isValidElement)(element) && (match = element.props.path ? matcher(element.props.path, location2 || originalLocation) : [true, {}])[0])
      return (0, import_react.cloneElement)(element, { match });
  }
  return null;
};
var Redirect = (props) => {
  const navRef = useNavigate(props);
  (0, import_react.useLayoutEffect)(() => {
    navRef.current();
  }, []);
  return null;
};
var wouter_default = useRoute;

// dep:wouter
var wouter_default2 = wouter_default;
export {
  Link,
  Redirect,
  Route,
  Router,
  Switch,
  wouter_default2 as default,
  useLocation,
  useRoute,
  useRouter
};
//# sourceMappingURL=wouter.js.map
